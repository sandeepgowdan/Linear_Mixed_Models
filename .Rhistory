B.SpATS <- extractSTA(m.SpATS, what = c("BLUEs", "BLUPs"), keep = "trial")
# Convert results to a data frame and rename columns
BLUEs <- B.SpATS$WH09$BLUEs
colnames(BLUEs)[3] <- "BLUEs_yield"
BLUPs <- B.SpATS$WH09$BLUPs
colnames(BLUPs)[3] <- "BLUPs_yield"
WH09BB <- left_join(BLUPs, BLUEs)
head(WH09BB)
# Plot BLUES vs BLUPs
ggplot(data = WH09BB, mapping = aes(x = BLUEs_yield, y = BLUPs_yield)) +
geom_point() + geom_abline(slope = 1, intercept = 0, color = "red")
# Calculate the range for BLUES and BLUPS
range(WH09BB$BLUEs_yield)
range(WH09BB$BLUPs_yield)
# Extract the BLUEs to a TD object
BLUEs <- STAtoTD(m.SpATS, what = c("BLUEs", "seBLUEs"), keep = "year")
head(BLUEs[[1]])
# Make boxplot and correlation plot for the BLUEs
plot(BLUEs, plotType = "box", traits = "BLUEs_yield", colorTrialBy = "year")
plot(BLUEs, plotType = "cor", traits = "BLUEs_yield")
plot(BLUEs, plotType = "cor", traits = "BLUEs_yield")
# Make boxplot and correlation plot for the BLUEs
plot(BLUEs, plotType = "box", traits = "BLUEs_yield", colorTrialBy = "year")
BLUEs
View(australia_map)
View(wheat_Australia_2008_2009_7loc)
# Make boxplot and correlation plot for the BLUEs
plot(BLUEs, plotType = "box", traits = "BLUEs_yield", colorTrialBy = "year")
plot(BLUEs, plotType = "cor", traits = "BLUEs_yield")
# Extract heritability
extractSTA(m.SpATS, what = "heritability")
## Fit series of mixed models with SpATS
m.SpATS <- fitTD(TD = td, traits = "yield",
design = "res.rowcol",
what = c("fixed", "random"),
spatial = TRUE,
engine = "SpATS")
# Extract heritability
extractSTA(m.SpATS, what = "heritability")
# Plot spatial trends for specific trials
plot(m.SpATS, plotType = "spatial", traits = "yield", trials = c("KA09", "WH09"))
plot(m.SpATS, plotType = "spatial", spaTrend = "percentage",
traits = "yield", trials = c("KA09", "WH09"))
# Extract BLUEs and BLUPs
B.SpATS <- extractSTA(m.SpATS, what = c("BLUEs", "BLUPs"), keep = "trial")
# Convert results to a data frame and rename columns
BLUEs <- B.SpATS$WH09$BLUEs
colnames(BLUEs)[3] <- "BLUEs_yield"
BLUPs <- B.SpATS$WH09$BLUPs
colnames(BLUPs)[3] <- "BLUPs_yield"
WH09BB <- left_join(BLUPs, BLUEs)
head(WH09BB)
library(metan)
data_ge <- data_ge
setwd("C:/Users/windows/OneDrive/Desktop/mixed models/GLM/data")
write.csv(data_ge, "data_ge.csv")
setwd("C:/Users/windows/OneDrive/Desktop/mixed models")
library(metan)
write
library(metan)
mixed_mod <-
gamem_met(data_ge,
env = ENV,
gen = GEN,
rep = REP,
resp = everything(),
random = "gen", #Default
verbose = TRUE) #Default
plot(mixed_mod)
plot(mixed_mod, type = "re")
data <- get_model_data(mixed_mod, "lrt")
print(data)
data <- get_model_data(mixed_mod)
data <- get_model_data(mixed_mod)
data
# Class of the model: waasb
# Variable extracted: genpar
print(data)
print(mixed_mod$GY$BLUPgen)
get_model_data(mixed_mod, what = "blupg")
library(ggplot2)
a <- plot_blup(mixed_mod)
b <- plot_blup(mixed_mod,
col.shape  =  c("gray20", "gray80"),
plot_theme = theme_metan(grid = "y")) +
coord_flip()
arrange_ggplot(a, b, tag_levels = "a")
##Import data
data <- data_ge
str(data)
head(data)
attach(data)
hist(GY)
data$REP<- as.factor(data$REP)
data$GEN<- as.factor(data$GEN)
data$ENV<- as.factor(data$ENV)
library(lme4)
Yieldvarcomp<- lmer(GY ~ (1|GEN) + (1|ENV) + (1|REP%in%ENV)+(1|(GEN:ENV)))
Yieldvarcomp<- lmer(GY ~ (1|GEN) + (1|ENV) +(1|(GEN:ENV)))
summary(Yieldvarcomp)
##BLUPs account for environmental effects and missing data
## Blups shrinks the value towards mean
My_blup<-ranef(Yieldvarcomp)
str(My_blup)
Varietyblups<- My_blup$GEN
Varietyblups
data<- data_ge
str(data)
data$REP<- as.factor(data$REP)
data$GEN<- as.factor(data$GEN)
data$ENV<- as.factor(data$ENV)
str(data)
library(lme4)
library(lmerTest)
m =aov(GY~ GEN + ENV + GEN:ENV, data=data) ## all are fixed effects
summary(m)
m1 =aov(GY~  GEN*ENV, data=data)
summary(m1)
###linear Mixed models  use random and fixed effects
Results1<- lmer(GY~ (GEN) + (1|ENV), data=data)
anova(Results1)
rand(Results1)  ##to see random effects
source("C:/Users/windows/OneDrive/Desktop/mixed models/A_Linear Mixed model/Linear_Mixed_Models.R")
##Import data
data <- data_ge
str(data)
head(data)
attach(data)
# Load necessary libraries
library(dplyr)
# Read the data file containing the covariates and yield measurements
data <- data_ge
# Define the covariates and yield variables
covariates <- c("HM")  # Replace with actual covariate names
yield_var <- "GY"  # Replace with actual yield variable name
# Perform covariate adjustment using linear regression
model <- lm(paste(yield_var, "~", paste(covariates, collapse = "+")), data = data)
# Get the adjusted yield values
data$adjusted_yield <- residuals(model) + mean(data[[yield_var]])
# View the adjusted yield values with genotype names
adjusted_data <- data %>%
mutate(adjusted_yield = data[[yield_var]] - residuals(model)) %>%
select(ENV, GEN, REP, HM, GY, adjusted_yield)  # Replace 'Genotype' with the actual column name
# Print the adjusted yield values with genotype names
print(adjusted_data)
# Print the adjusted yield values with genotype names
print(adjusted_data)
# Write the original yield and adjusted yield to a new CSV file
write.csv(adjusted_data, file = "yield_adjustment_results111.csv", row.names = FALSE)
## Correlatrion graphics
library(readxl)
data1 <- read.csv("C:\\Users\\windows\\OneDrive\\Desktop\\data111.csv")
View(data1)
names(data1)
new_plot <- data1[,4:12]
#Correlation analysis and correlelograms
library(metan)
corrl <- corr_coef(new_plot)
plot(corrl)
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "original")
install.packages("corrplot")
library(corrplot)
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "original")
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "AOE")
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "original")
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "AOE")
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "alphabet")
corrplot(corr = cor(new_plot),
method = "circle",
type = "full",
tl.pos = "tl",
order = "AOE")
corrplot(corr = cor(new_plot),
method = "shade",
type = "full",
tl.pos = "tl",
order = "FPC")
corrplot(corr = cor(new_plot),
method = "square",
type = "full",
tl.pos = "tl",
order = "hclust")
corrplot(corr = cor(new_plot),
method = "ellipse",
type = "lower",
tl.pos = "tl",
addrect = 2, rect.col = 'green')
corrplot(cor(new_plot),
addCoef.col = "black",
number.cex = 0.8,
number.digits = 1,
diag = TRUE,
bg = "blue",
outline = "white",
addgrid.col = "white",
mar = c(1,1,1,1))
corrplot(corr = cor(new_plot),
addCoef.col = 'black',
number.cex = 0.8,
number.digits = 1,
diag = FALSE,
bg = "grey",
outline = "black",
addgrid.col = "black",
mar = c(1,1,1,1))
col <- colorRampPalette(c("#7F0000", "red", "#FF7F00",
"yellow", "white", "cyan",
"#007FFF", "blue", "#00007F"))
corrplot(corr = cor(new_plot),
method = "color",
type = "lower",
col = COL1(10),
cl.length = 11,
cl.pos = "b",
tl.col = "black",
addCoef.col = "grey",
title = "A few more changes - Part 2",
mar = c(1,1,1,1))
#Mixed corrplots
corrplot(cor(new_plot), order = "AOE", type = "upper",
tl.pos = "d", method = "number")
corrplot(cor(new_plot), add = TRUE, type = "lower",
method = "pie", order = "AOE",
diag = FALSE, tl.pos = "n", cl.pos = "n")
corrplot.mixed(cor(new_plot), order = "AOE",
lower = "pie", upper = "number",
tl.pos = c("d"))
install.packages("GGally")
library(GGally)
GGally::ggpairs(iris, columns = 1:4)
#Adding species information and color
GGally::ggpairs(iris, columns = 1:4,
ggplot2::aes(colour = Species))
#Visualization and correlations
GGally::ggcorr(new_plot,
method = c("everything", "pearson"),
label = TRUE, label_alpha = TRUE)
GGally::ggcorr(
new_plot,
name = expression(rho),
geom = "tile",
max_size = 10,
min_size = 2,
size = 3,
hjust = 0.75,
nbreaks = 6,
angle = -45,
palette = "Puor" # colorbind safe, photocopy able
)
## corrgram::corrgram()---
install.packages("corrgram")
library(corrgram)
#Basic
corrgram:corrgram(new_plot)
#First
corrgram::corrgram(new_plot, order = TRUE,
lower.panel = panel.shade,
upper.panel = panel.pie,
text.panel = panel.txt,
cor.method = "pearson",
main = "corrgram(mtcars"
)
#Second
corrgram::corrgram(new_plot, order = TRUE,
lower.panel = panel.ellipse,
upper.panel = panel.pts,
txt.panel = panel.txt,
diag.panel = panel.minmax,
main = "corrgram(mtcars, diag.panel
= panel.minmax)")
#Third
corrgram::corrgram (new_plot,
order = TRUE,
lower.panel = panel.shade,
upper.panel = NULL,
text.panel = panel.txt)
corrgram (new_plot,
lower.panel = panel.pts,
upper.panel = panel.conf,
diag.panel = panel.density,
main = "corrgram(iris[1:4],
panel.pts/.density/.conf)")
corrgram(new_plot, order = TRUE, main= "corrgram
(mtcars)- panel.bar",
lower.panel = corrgram::panel.ellipse,
upper.panel = panel.bar, diag.panel = panel.minmax,
col.regions = colorRampPalette(
c("darkgoldenrod4","burlywood1", "darkkhaki",
"darkgreen")))
## pairs.panels() and corPlot() ----
install.packages("psych")
library(psych)
pairs.panels(new_plot)
pairs.panels(new_plot,
smooth = TRUE, #If true draws less smooths
scale = TRUE, #If true scales the correlation text font
density = FALSE, #If true, adds density plots and histograms
ellipses = TRUE, #If true draws ellipses
method = "pearson", #Correlationmethod also spearman or kendall
pch = 21 + as.numeric(iris$Species),
bg = c("red", "yellow", "blue")[iris$Species],
lm = TRUE, #iF true plots linear fit rather than the less smoothed fit
cor = TRUE, #If true, reports correlations
jiggle = FALSE, #If true, data ponts are jittered
factor = 2, #Jittering factor
hist.col = 4, #Histograms color
stars = TRUE, #If true, adds significance level with stars
ci = FALSE, #If true adds confidence intervals
)
psych::corPlot(new_plot, cex = 0.9)
gr <- colorRampPalette(c("#B52127", "white", "#217185"))
corPlot(new_plot,
cex = 0.9,
numbers = TRUE,
n = 21, #show with n=51)
zlim = c(-1,1),
stars = TRUE,
diag = FALSE,
gr = gr,
main = "psych::corPlot(iris[1:4])"
)
## ggplot2 and geom_tile
install.packages("tidyverse")
library(tidyverse)
mtcars_cormat <- cor(new_plot) %>%
as.data.frame() %>%
rownames_to_column() %>%
pivot_longer(-rowname)
mtcars_cormat %>%
ggplot(aes(x = rowname, y = name, fill = value))+
geom_tile()+
geom_text(aes(label = round(value, 2)), color = "white") +
scale_fill_gradient2(low = "red",
high = "darkgreen",
mid = "white",
midpoint = 0,
limit = c(-1,1),
name = "Pearson\ncorrelation"
)
library(SpATS)
data(wheatdata)
wheatdata$R <- as.factor(wheatdata$row)
wheatdata$C <- as.factor(wheatdata$col)
m0 <- SpATS(response = "yield", spatial = ~ SAP(col, row, nseg = c(10,20)),
genotype = "geno", fixed = ~ colcode + rowcode, random = ~ R + C,
data = wheatdata, control =  list(tolerance = 1e-03))
# Fitted values: prediction on the dataset used for fitting the model
pred1.m0 <- predict(m0, newdata = wheatdata)
pred1.m0
# Genotype prediction
pred2.m0 <- predict(m0, which = "geno")
pred2.m0[1:5,]
pred2.m0
library(SpATS)
data(wheatdata)
wheatdata$R <- as.factor(wheatdata$row)
wheatdata$C <- as.factor(wheatdata$col)
m0 <- SpATS(response = "yield", spatial = ~ SAP(col, row, nseg = c(10,20), degree = 3, pord = 2),
genotype = "geno", fixed = ~ colcode + rowcode, random = ~ R + C, data = wheatdata,
control =  list(tolerance = 1e-03))
# Default plotting
plot(m0)
# Annotated
plot(m0, annotated = TRUE, main = "Wheat data (Gilmour et al., 1997)")
library(SpATS)
data(wheatdata)
wheatdata$R <- as.factor(wheatdata$row)
wheatdata$C <- as.factor(wheatdata$col)
m0 <- SpATS(response = "yield", spatial = ~ SAP(col, row, nseg = c(10,20), degree = 3, pord = 2),
genotype = "geno", fixed = ~ colcode + rowcode, random = ~ R + C, data = wheatdata,
control =  list(tolerance = 1e-03))
# Default plotting
plot(m0)
# Annotated
plot(m0, annotated = TRUE, main = "Wheat data (Gilmour et al., 1997)")
library(FielDHub)
install.packages("FielDHub")
F
library(FielDHub)
source("~/.active-rstudio-document", echo=TRUE)
##field book
options(max.print=999999)
alpha$fieldBook
#Using agricole
library(agricolae)
trt<- 1:55
t<-length(trt)
k<- 5
r<-3
outdesign<- design.alpha(trt,k,r,serie=1)
install.packages("agricolae")
b
#Using agricole
library(agricolae)
trt<- 1:55
t<-length(trt)
k<- 5
r<-3
outdesign<- design.alpha(trt,k,r,serie=1)
outdesign$sketch
outdesign$book
#Download and install the Agricolae and Agrocolaeplotr packages
###Alpha lattice design ####
library(FielDHub)
alpha <-  alpha_lattice(
t = 15,
k = 3,
r = 4,
l = 2,
plotNumber = 101,
locationNames = c("Jimma", "Kay"),
)
plot(alpha)
options(max.print = 999999)
crd1 <- CRD(
t = 10,
reps = 5,
plotNumber = 101,
seed = 1987,
locationName = "Fargo"
)
plot(crd1)
####Randomised Complete Block design ####
# Example 2: Generates a RCBD design with 6 blocks and 18 treatments in one location.
# In this case, we show how to use the option data.
treatments <- paste("ND-", 1:18, sep = "")
treatment_list <- data.frame(list(TREATMENT = treatments))
head(treatment_list)
rcbd2 <- RCBD(reps = 6, l = 1,
plotNumber = 101,
continuous = FALSE,
planter = "serpentine",
seed = 13,
locationNames = "IBAGUE",
data = treatment_list)
print(rcbd2)
plot(rcbd2)
rcbd2$infoDesign
rcbd2$layoutRandom
rcbd2$plotNumber
head(rcbd2$fieldBook)
checks <- 4;
list_checks <- paste("CH", 1:checks, sep = "")
treatments <- paste("G", 5:354, sep = "")
treatment_list <- data.frame(list(ENTRY = 1:354, NAME = c(list_checks, treatments)))
head(treatment_list, 12)
ARCBD2 <- RCBD_augmented(lines = 350, checks = 4, b = 17, l = 3,
planter = "serpentine",
plotNumber = c(101,1001,2001),
seed = 24,
locationNames = LETTERS[1:3],
data = treatment_list)
plot(ARCBD2)
ARCBD2$infoDesign
ARCBD2$layoutRandom
ARCBD2$exptNames
ARCBD2$plotNumber
head(ARCBD2$fieldBook, 12)
# Example 2: Generates a split plot design SPD with 5 whole plots
# (4 types of fungicide + one control), 10 sub plots per whole plot (10 bean varieties),
# and 6 reps in an RCBD arrangement. This in 3 locations or sites.
# In this case, we show how to use the option data.
wp <- c("NFung", paste("Fung", 1:4, sep = ""))  # Fungicides (5 Whole plots)
sp <- paste("Beans", 1:10, sep = "")            # Beans varieties (10 sub plots)
split_plot_Data <- data.frame(list(WHOLPLOT = c(wp, rep(NA, 5)), SUBPLOT = sp))
head(split_plot_Data, 12)
SPDExample2 <- split_plot(reps = 6, l = 3,
plotNumber = c(101, 1001, 2001),
seed = 23,
type = 2,
locationNames = c("A", "B", "C"),
data = split_plot_Data)
plot(SPDExample2)
SPDExample2$infoDesign
SPDExample2$layoutlocations
head(SPDExample2$fieldBook,12)
####Full factorial #####
#Example 1: Generates a full factorial with 3 factors each with 2 levels.
# This in an RCBD arrangement with 3 reps.
fullFact1 <- full_factorial(setfactors = c(2,2,2), reps = 3, l = 1, type = 2,
plotNumber = 101,
continuous = TRUE,
planter = "serpentine",
seed = 325,
locationNames = "FARGO")
plot(fullFact1)
fullFact1$infoDesign
head(fullFact1$fieldBook,10)
